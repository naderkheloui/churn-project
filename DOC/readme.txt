√âTAPE 1 : Initialiser Git dans ton projet local

Dans ton terminal PyCharm (v√©rifie bien que tu es dans le dossier racine de ton projet Churn), tape :
git init

Cette commande va cr√©er un d√©p√¥t Git local (un dossier .git cach√©) dans le projet.





√âTAPE 2 : Ajouter ton fichier .gitignore
******************************************
Le fichier .gitignore permet de sp√©cifier les fichiers et dossiers que Git doit ignorer, comme par exemple des fichiers temporaires, des fichiers de configuration ou des fichiers g√©n√©r√©s qui ne doivent pas √™tre suivis par Git.

Cr√©e un fichier .gitignore √† la racine de ton projet (si tu ne l'as pas d√©j√†).

Ajoute des r√®gles de base dans ce fichier (tu peux le remplir avec les √©l√©ments suivants) :


/////
# Fichiers de configuration IDE
.idea/

# Environnement virtuel
.venv/

# Fichiers g√©n√©r√©s par Python
__pycache__/
*.pyc

# Fichiers de logs
*.log

# D'autres fichiers sp√©cifiques √† ton projet
/////

Pour v√©rifier que ton fichier .gitignore fonctionne bien, tape la commande suivante dans le terminal :
git status


Etape 3: ajouter les fichier et dossier a git (staging) avec :

git add .





√âtape 4: Faire un commit
*************************

Cr√©er un commit :Un commit est comme une "photo" de ton projet √† un moment donn√©.
Chaque fois que tu effectues un commit, tu peux ajouter un message d√©crivant ce que tu as modifi√©.
Pour faire un commit, utilise la commande suivante :

git commit -m "Premier commit - Ajout des fichiers de base"

-m permet de sp√©cifier un message pour ce commit.

Le message "Premier commit - Ajout des fichiers de base" est une description
de ce que tu as ajout√© ou chang√©. C‚Äôest une bonne pratique d‚Äô√©crire des messages
clairs et explicites pour te souvenir de chaque √©tape de ton projet.


V√©rifier que ton commit est bien effectu√© :
*******************************************
Apr√®s avoir fait le commit, tu peux utiliser la commande suivante pour v√©rifier l'historique des commits :

****************************************************************************************


√âtape 5 : Connecter ton projet local √† GitHub
*********************************************
Maintenant que tu as effectu√© un commit local, nous allons connecter ton projet √† GitHub, ce qui te permettra de pousser ton code sur la plateforme. Voici ce qu'il faut faire √©tape par √©tape :

1. Cr√©er un d√©p√¥t sur GitHub
****************************
Si ce n‚Äôest pas encore fait, va sur GitHub et cr√©e un nouveau d√©p√¥t :

Va sur GitHub.

Connecte-toi √† ton compte.

Clique sur le bouton "New" pour cr√©er un nouveau d√©p√¥t (repository).

Donne un nom √† ton d√©p√¥t (par exemple, Churn-Project).

Assure-toi que l'option "Public" est s√©lectionn√©e.

Ne coche pas l'option pour ajouter un fichier README (tu l'as d√©j√† fait localement).

Clique sur Create repository.

Une fois le d√©p√¥t cr√©√©, tu devrais voir une page avec des instructions pour connecter ton d√©p√¥t local √† ce d√©p√¥t GitHub.


2. Ajouter l'URL de ton d√©p√¥t GitHub comme d√©p√¥t distant
********************************************************
Sur la page GitHub de ton d√©p√¥t, tu verras une URL, elle ressemblera √† ceci :

https://github.com/ton-nom-utilisateur/ton-depot.git

Dans ton terminal PyCharm (dans ton projet local),
tu vas lier ton d√©p√¥t local √† ce d√©p√¥t distant sur GitHub en utilisant la commande suivante :
************************************************************************************************
git remote add origin  https://github.com/naderkheloui/churn-project.git
Cette commande associe ton d√©p√¥t local avec le d√©p√¥t GitHub, via l'URL que tu viens de copier.






GENERATION TOKEN:
*****************


M√©thode recommand√©e : via un Token GitHub (HTTPS)
Depuis ao√ªt 2021, GitHub n‚Äôautorise plus l‚Äôusage du mot de passe classique, il faut utiliser un token d'acc√®s personnel (PAT).

Voici comment faire :
Va sur https://github.com/settings/tokens.

Clique sur "Fine-grained tokens" ou "Personal access tokens".

Clique sur "Generate new token".

Coche les permissions n√©cessaires :

repo ‚Üí pour les acc√®s en lecture/√©criture sur tes d√©p√¥ts.

Garde le token pr√©cieusement (copie-le imm√©diatement, tu ne pourras plus le voir apr√®s).

Lorsqu‚Äôil te demande ton login/mot de passe dans le terminal :

Pour le login : entre ton nom d‚Äôutilisateur GitHub.

Pour le mot de passe : colle le token (ctrl+v ou clic droit coller dans le terminal).

üß† Astuce :
Pour √©viter d‚Äôavoir √† retaper ton token √† chaque fois, tu peux :

Configurer un gestionnaire de cl√©s Git (git-credential-manager).

Ou utiliser SSH (m√©thode avanc√©e, on pourra la voir plus tard).

Tu veux que je t‚Äôaccompagne pour g√©n√©rer ton token maintenant ?







Vous avez dit¬†:
oui stp


ChatGPT a dit¬†:
Parfait ! Voici les √©tapes tr√®s simples pour g√©n√©rer un token GitHub et l‚Äôutiliser pour te connecter :

üîê √âtape 1 : Aller sur la page des tokens GitHub
Connecte-toi √† GitHub : https://github.com

Va sur : https://github.com/settings/tokens

Clique sur "Generate new token" ‚Üí Choisis "Fine-grained token" (le plus s√©curis√©)
üëâ Ou sinon, clique sur "Generate new token (classic)" si l‚Äôautre n‚Äôest pas disponible.

üìù √âtape 2 : Cr√©er le token
Nom du token : par exemple token-git-local

Expiration : choisis 90 days ou No expiration

Repository access : choisis "Only select repositories" ‚Üí coche ton d√©p√¥t ou "All repositories"

Permissions :

Section Repository : coche "Contents - Read and write"

Clique sur "Generate token"

‚úÖ Tu vas obtenir un long code ‚Üí quelque chose comme :

nginx
Copier
Modifier
ghp_9aP01234EXEMPLEabcdeTOKEN12345678
‚ö†Ô∏è Copie-le tout de suite et garde-le de c√¥t√© (bloc-notes par exemple). Tu ne pourras plus le revoir apr√®s.

üí° √âtape 3 : L'utiliser pour te connecter depuis Git
Retourne dans ton terminal PyCharm

Tape la commande suivante (si ce n‚Äôest pas d√©j√† fait) :

bash
Copier
Modifier
git push -u origin main
Il te demandera :

Username ‚Üí entre ton nom GitHub (ex: tonpseudo)

Password ‚Üí colle le token (clic droit ou Ctrl + V)




3. Pousser (push) ton commit local vers GitHub
**********************************************
Maintenant que ton d√©p√¥t local est li√© √† GitHub, tu peux envoyer (pousser) ton commit local vers GitHub avec la commande suivante :

git push -u origin master






*********************************************************************************
*********************************************************************************

 √âtape 1 : Cloner ton d√©p√¥t (comme un autre utilisateur)
üìå Objectif :
Simuler un nouveau collaborateur qui r√©cup√®re ton projet depuis GitHub.

‚úÖ √âtapes √† suivre :
Cr√©e un nouveau dossier sur ton ordinateur (ex. : Churn_clone)

Ouvre PyCharm et dans le menu, choisis :

Get from VCS (VCS = Version Control System) ou Clone repository


√âtape suivante : Cr√©er une branche (bonne pratique)
Pourquoi ?
Quand on travaille √† plusieurs ou sur une nouvelle fonctionnalit√©, on ne modifie pas directement la branche master (ou main).
On cr√©e une branche s√©par√©e pour y faire ses changements


√âtape 2 : Cr√©er une branche et passer dessus
********************************************
Dans ton terminal PyCharm (dans le dossier du projet clon√©), tape :

git checkout -b ma-nouvelle-branche

Tu peux remplacer ma-nouvelle-branche par un nom plus parlant, comme ajout-predict-route ou fix-tests.

Cette commande fait deux choses :

1) Elle cr√©e une nouvelle branche.

2) Elle te positionne dessus automatiquement.





**********************************************************************************
**********************************************************************************

√âtape 3 : Modifier le code
**************************

Tu peux maintenant :

faire une petite modification dans ton projet (par exemple modifier un commentaire, ou am√©liorer un fichier)

puis sauvegarder ton fichier comme d‚Äôhabitude dans PyCharm

Ensuite, dans le terminal :

git status

Cette commande te montre les fichiers modifi√©s.





√âtape 4 : Ajouter les fichiers au staging (pr√©parer le commit)
**************************************************************

Tape la commande suivante pour ajouter toutes les modifications au staging area :

git add . pour ajouter tout
git add chemin depuis dossier vers fichier modifi√©: git add API/app.py



√âtape 5 : Faire un commit
*************************


Un commit est un instantan√© de ton projet √† un moment donn√©. C‚Äôest comme dire : "Voici une √©tape importante ou une modification que je veux enregistrer".

Fais ton premier commit avec un message clair :

git commit -m "Ajout initial du projet Churn"





√âtape 6 : Lier ton d√©p√¥t local √† GitHub
***************************************

A. Qu'est-ce que √ßa signifie ?
------------------------------
Quand tu clones un projet depuis GitHub, PyCharm configure d√©j√† pour toi le lien entre ton d√©p√¥t local et le d√©p√¥t distant sur GitHub. Cela permet de pousser (push) tes changements de ton projet local vers GitHub et inversement.

Par d√©faut, quand tu clones un projet, Git associe l‚ÄôURL GitHub √† un alias origin. Tu n‚Äôas donc pas besoin de refaire cette √©tape si tu as clon√© ton projet depuis GitHub. Cependant, si tu n'as pas clon√© le projet mais que tu veux le lier manuellement √† un d√©p√¥t GitHub, tu devras utiliser la commande git remote add origin.

B. V√©rifier si tu as d√©j√† un d√©p√¥t distant li√©
----------------------------------------------
Pour savoir si ton d√©p√¥t local est d√©j√† li√© √† un d√©p√¥t distant sur GitHub, tu peux utiliser cette commande dans le terminal de PyCharm :


git remote -v


Si tu vois des liens (comme https://github.com/ton-utilisateur/ton-projet.git), cela signifie que ton d√©p√¥t est d√©j√† li√© √† GitHub.

Sinon, tu verras rien ou un message d'erreur.


C. Si tu n‚Äôas pas encore li√© ton d√©p√¥t √† GitHub
-----------------------------------------------
Si tu vois qu‚Äôil n‚Äôest pas li√© √† un d√©p√¥t distant (en v√©rifiant avec git remote -v), tu peux le faire en ajoutant le d√©p√¥t GitHub avec cette commande :

Ajoute un d√©p√¥t distant avec l'URL GitHub :

git remote add origin https://github.com/ton-utilisateur/ton-projet.git

üëâ Remplace ton-utilisateur par ton nom d'utilisateur GitHub et ton-projet par le nom de ton d√©p√¥t.




D. V√©rifier la liaison avec GitHub
----------------------------------

Une fois la commande ex√©cut√©e, tu peux v√©rifier que le d√©p√¥t distant est bien ajout√© avec :

git remote -v

Cela devrait te renvoyer quelque chose comme √ßa :

origin  https://github.com/ton-utilisateur/ton-projet.git (fetch)
origin  https://github.com/ton-utilisateur/ton-projet.git (push)







******************************************************************************
******************************************************************************

√âtape 7 : Pousser ta branche locale vers GitHub
***********************************************

Maintenant que ton d√©p√¥t local est li√© √† GitHub, il est temps de pousser ta branche branche-nadir vers GitHub.

Pousser la branche vers GitHub :

Comme tu as cr√©√© une branche branche-nadir sur ton d√©p√¥t local, tu veux l'envoyer sur GitHub pour qu'elle soit accessible √† d'autres personnes (ou pour la sauvegarder sur le cloud).

Utilise cette commande pour pousser ta branche branche-nadir :

git push -u origin branche-nadir


origin est le nom du d√©p√¥t distant (GitHub dans ce cas).

branche-nadir est la branche que tu veux pousser.

La premi√®re fois que tu pousses une branche, tu dois utiliser -u pour dire √† Git de lier cette branche locale √† la branche distante sur GitHub.

Apr√®s avoir ex√©cut√© cette commande, tu devrais voir un message du type :

To https://github.com/ton-utilisateur/ton-depot.git
 * [new branch]      branche-nadir -> branche-nadir




******************************************************************************
******************************************************************************
√âtape 8 : V√©rifier sur GitHub
*****************************

Rends-toi sur GitHub et v√©rifie si ta branche branche-nadir est bien visible dans l'onglet Branches de ton d√©p√¥t.

Si tu vois ta branche sur GitHub, cela signifie que tout s'est bien pass√© !

Tu as maintenant r√©ussi √† pousser ta branche sur GitHub et elle est sauvegard√©e √† distance.









******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************


C‚Äôest quoi une Pull Request ?
******************************

Une Pull Request (PR), c‚Äôest une demande de fusion de code que tu as modifi√© sur une branche (par exemple branche-nadir) vers une autre branche (souvent main ou master).

C‚Äôest un peu comme dire √† ton √©quipe (ou √† toi-m√™me si tu es seul) :

‚ÄúH√©, j‚Äôai fini mes changements ici, est-ce qu‚Äôon peut les ajouter dans le projet principal ?‚Äù


üëÄ C‚Äôest quoi une Revue de Code ?
**********************************

Avant d‚Äôaccepter cette demande (la PR), quelqu‚Äôun peut :

Lire le code modifi√©,

V√©rifier qu‚Äôil fonctionne bien,

Sugg√©rer des am√©liorations,

Ou d√©tecter des erreurs potentielles.

C‚Äôest ce qu‚Äôon appelle une revue de code (code review).

M√™me si tu es seul, cette √©tape t‚Äôaide √† bien relire ton propre code avant de le fusionner.



C‚Äôest quoi une Fusion ?
***********************
Une fois que tout est valid√©, on fusionne (merge) la branche dans le projet principal (main/master). Le code de ta branche devient alors officiellement une partie du projet principal.

üîÅ En r√©sum√© :
***************
   Terme	                 Description
Pull Request	   Demande de fusion de ton code (branche ‚Üí main)
Revue de Code	   V√©rification du code avant la fusion
Fusion (Merge)	   Int√©gration du code dans le projet principal

Souvent utilis√© dans un travail d‚Äô√©quipe, mais tr√®s utile m√™me en solo, car √ßa t‚Äôoblige √† structurer tes √©tapes : coder ‚Üí tester ‚Üí valider ‚Üí int√©grer.









******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
************************ COLLABORATION EQUIPE  *******************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************
******************************************************************************




√âtape 8 : Cr√©er une Pull Request (PR)
*************************************
1) Va sur GitHub dans ton d√©p√¥t.

2) Tu devrais voir un bandeau violet ou jaune en haut qui dit :

	‚Äúbranche-nadir had recent pushes...‚Äù
	Et un bouton : Compare & pull request
	‚û§ Clique dessus.

      Si tu ne vois pas ce bandeau, pas de panique :

	Clique sur le menu "Pull requests"

	Puis clique sur "New pull request"

	S√©lectionne :

		base = master

		compare = branche-nadir

3) Tu arrives sur la page de cr√©ation de PR :

	Mets un titre clair : Ajout des fonctions d'authentification

	Dans la description, explique bri√®vement ce que tu as chang√©.

	Clique sur Create pull request


üìù C‚Äôest √† cette √©tape qu‚Äôen √©quipe, un coll√®gue lirait ton code et ferait une review (relecture).







√âtape 9 : Fusionner la Pull Request (PR)
****************************************
Maintenant que ta Pull Request est cr√©√©e, on va fusionner (merge) ton travail dans la branche principale master.

üëâ √âtapes pour fusionner :
	1. Toujours sur GitHub, dans ta Pull Request, tu devrais voir un bouton ‚ÄúMerge pull request‚Äù.

	2. Clique dessus.

	3. Puis clique sur ‚ÄúConfirm merge‚Äù.


üéâ Bravo ! Ton code est maintenant int√©gr√© dans la branche principale (master).
Ta branche branche-nadir existe toujours, mais le travail est d√©sormais fusionn√©.




√âtape 9 : R√©cup√©rer les derni√®res modifications de master (si on est un autre utilisateur)
*******************************************************************************************

Quand quelqu‚Äôun fusionne une PR dans master, les autres doivent mettre √† jour leur copie locale pour rester √† jour.

üëâ Commandes √† ex√©cuter :
	git checkout master          # Revenir sur la branche master
	git pull origin master       # R√©cup√©rer les derniers changements de GitHub

Cela t‚Äôassure de travailler sur la derni√®re version du projet.
